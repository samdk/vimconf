filetype off
filetype indent plugin off
call pathogen#runtime_append_all_bundles()
filetype on
filetype indent on
filetype plugin on

" requirements: fzf, ag

" disable saving ~/.vim.netrwhist
:let g:netrw_dirhistmax = 0

" general things
set nocompatible
set backspace=indent,eol,start
syntax on
set number " show line numbers
set t_Co=256

" vimclojure stuff
let vimclojureRoot="~/.vim/bundle/vimclojure"
let vimclojure#HighlightBuiltins=1
let vimclojure#HighlightContrib=1
let vimclojure#DynamicHighlighting=1
let vimclojure#ParenRainbow=1

" make Python syntax highlighting highlight more things
let python_highlight_numbers=1
let python_highlight_builtins=1
let python_highlight_exceptions=1

" coffeescript syntax highlighting stuff
let coffee_no_trailing_space_error=1

" better titlestring for working on multiple computers
let &titlestring = "%m %f @ " . hostname()

" set undofile option if it's supported (old debian/centos dislike it)
if exists('&undofile')
  set undofile
  set undodir=~/.vim/undo//
endif
set undolevels=1000

set cryptmethod=blowfish
set switchbuf=useopen

set smarttab

" remember some stuff after quiting vim: marks, registers, searches, buffer list                      
set viminfo='20,<50,s10,h,%

set gdefault

" kill error bells entirely
set noerrorbells
set novisualbell
set t_vb=

" better titlestring for working on multiple computers
let &titlestring = "%m %f @ " . hostname()

" mouse in terminal
set mouse=a

set history=1000
set ruler
set showmatch
runtime macros/matchit.vim " matches if/elseif/else as well as brackets

set scrolloff=3 " scroll before reaching the edge of the page
set virtualedit=block

set nowrap
set lbr " wraps at words instead of at characters

" stuff for searching
set ignorecase
set smartcase
set hlsearch
set incsearch
map <silent> <F12> :nohlsearch<CR>

" autocomplete when opening files. behaves somewhat similarly to bash.
set wildignore=*.bak,*.swp,*.pyc,*.o,*.obj,*.dll,*.exe,*.ml.d,*.mli.d,*.objdeps
set wildmenu
set wildmode=list:longest

" by default, use 2 spaces. tabs are 8 to make them stand out.
set tabstop=8
set shiftwidth=2
set softtabstop=2
set expandtab

set autoindent
set smartindent

au BufRead,BufNewFile *.py setl et sw=4 sts=4 ts=8

" new HTML files get automatic boilerplate
au BufNewFile *.html 0r ~/.vim/templates/template.html

" some additional bindings for dealing with ctags
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR> "open in new tab
map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR> " open in new vertical split

" backups and swap files go in .vim
"
" ending with the double slash includes the full path in the filename
" of the swap files to avoid conflicts
"set backupdir=~/.vim/backup//
"set backup
"set directory=~/.vim/tmp//
set nobackup
set noswapfile

set modeline
set modelines=10

set shortmess=at

" leader commands
let maplocalleader = ",,"
let mapleader = ","
nmap <leader>c :%s///gn<cr> " ,c gives a count of highlighted stuff

" fzf enhancements
nmap <leader>f :call fzf#run({'sink': 'tabedit', 'options': '--multi', 'down': '50%'})<CR>

function! s:ag_to_qf(line)
  let parts = split(a:line, ':')
  return {'filename': parts[0], 'lnum': parts[1], 'col': parts[2],
        \ 'text': join(parts[3:], ':')}
endfunction

function! s:ag_handler(lines)
  if len(a:lines) < 2 | return | endif

  let cmd = get({'ctrl-x': 'split',
                \ 'ctrl-v': 'vertical split',
                \ 'ctrl-t': 'e'}, a:lines[0], 'tabedit')
  let list = map(a:lines[1:], 's:ag_to_qf(v:val)')

  let first = list[0]
  execute cmd escape(first.filename, ' %#\')
  execute first.lnum
  execute 'normal!' first.col.'|zz'

  if len(list) > 1
    call setqflist(list)
    copen
    wincmd p
  endif
endfunction

command! -nargs=* Ag call fzf#run({
      \ 'source':  printf('ag --nogroup --column --color "%s"', escape(empty(<q-args>) ? '^(?=.)' : <q-args>, '"\')),
      \ 'sink*':   function('<sid>ag_handler'),
      \ 'options': '--ansi --expect ctrl-t,ctrl-v,ctrl-x --delimiter : --nth 4 --multi --color hl:68,hl+:110',
      \ 'down':    '50%'
      \ })

" up/down move between visual lines instead of actual lines when wrapped
imap <silent> <Down> <C-o>gj
imap <silent> <Up> <C-o>gk
nmap <silent> <Down> gj
nmap <silent> <Up> gk

" autocompletes parens/brackets
inoremap ( ()<Left>
inoremap [ []<Left>

" autocomplete quotes intelligently
" stolen from somewhere, although I don't remember where.
inoremap ' '<Esc>:call QuoteInsertionWrapper("'")<CR>a
inoremap " "<Esc>:call QuoteInsertionWrapper('"')<CR>a
inoremap ` `<Esc>:call QuoteInsertionWrapper('`')<CR>a

function! QuoteInsertionWrapper (quote)
  let col = col('.')
  if getline('.')[col-2] !~ '\k' && getline('.')[col] !~ '\k'
    normal ax
    exe "normal r".a:quote."h"
  end
endfunction

" requires vim-indent-guides -- colors specified in vimsidian color scheme
let g:indent_guides_auto_colors = 0
let g:indent_guides_enable_on_vim_startup = 1

" graphical undo tree
nnoremap <F5> :GundoToggle<CR>

" use space to jump to space
nnoremap <Space> }
vnoremap <Space> }
nnoremap \ {
vnoremap \ {

" Ctrl-N and Ctrl-P go to next/prev tabs in normal mode
nmap <silent> <C-N> :tabnext<Enter>
nmap <silent> <C-P> :tabprev<Enter>

" show highlight group for text under cursor
map <F3> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">" . " FG:" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"fg#")<CR>

colorscheme vimsidian2
" no need for a separate .gvimrc
if has('gui_running')
  set lines=60 " new gvim windows are 100x60
  set columns=100
  set guifont=Inconsolata\ 11

  set guioptions-=m  " hide the menu bar
  set guioptions-=T  " hide the toolbar
  set guioptions-=rR " hide the right-hand scroll bar
  set guioptions-=lL " hide the left-hand scroll bar
  set guioptions-=b  " hide the horizontal scroll bar
  " shows/hides menu bar on Ctrl-F1
  nnoremap <C-F1> :if &go=~#'m'<Bar>set go-=m<Bar>else<Bar>set go+=m<Bar>endif<CR>

  " vim indent guides support -- only really looks nice in gvim
  let g:indent_guides_color_change_percent=4 " subtle is good
  let g:indent_guides_enable_on_vim_startup=1
endif


" add environment-specific customizations"
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

" lookup keyword is almost never used, invert J instead 
nnoremap K i<CR><Esc>

" map <leader>= and <leader>- to perform the most common alignments
nnoremap <leader>- :Tabularize /-><cr>
nnoremap <leader>; :Tabularize /^[^:]*\zs:<cr>
nnoremap <leader>= :Tabularize /^[^=]*\zs=<cr>
vnoremap <leader>- :Tabularize /-><cr>
vnoremap <leader>; :Tabularize /^[^:]*\zs:<cr>
vnoremap <leader>= :Tabularize /^[^=]*\zs=<cr>

" ocaml
let $OCP_INDENT_CONFIG = 'JaneStreet'
let g:opamshare = substitute(system('opam config var share'),'\n$','','''')
execute "set rtp+=" . g:opamshare . "/merlin/vim"

function! VimColorTest(outfile, fgend, bgend)
  let result = []
  for fg in range(a:fgend)
    for bg in range(a:bgend)
      let kw = printf('%-7s', printf('c_%d_%d', fg, bg))
      let h = printf('hi %s ctermfg=%d ctermbg=%d', kw, fg, bg)
      let s = printf('syn keyword %s %s', kw, kw)
      call add(result, printf('%-32s | %s', h, s))
    endfor
  endfor
  call writefile(result, a:outfile)
  execute 'edit '.a:outfile
  source %
endfunction
command! VimColorTest call VimColorTest('vi-color-test.tmp', 120, 1)

" ## added by OPAM user-setup for vim / base ## 93ee63e278bdfc07d1139a748ed3fff2 ## you can edit, but keep this line
let s:opam_share_dir = system("opam config var share")
let s:opam_share_dir = substitute(s:opam_share_dir, '[\r\n]*$', '', '')

let s:opam_configuration = {}

function! OpamConfOcpIndent()
  execute "set rtp^=" . s:opam_share_dir . "/ocp-indent/vim"
endfunction
let s:opam_configuration['ocp-indent'] = function('OpamConfOcpIndent')

function! OpamConfOcpIndex()
  execute "set rtp+=" . s:opam_share_dir . "/ocp-index/vim"
endfunction
let s:opam_configuration['ocp-index'] = function('OpamConfOcpIndex')

function! OpamConfMerlin()
  let l:dir = s:opam_share_dir . "/merlin/vim"
  execute "set rtp+=" . l:dir
endfunction
let s:opam_configuration['merlin'] = function('OpamConfMerlin')

let s:opam_packages = ["ocp-indent", "ocp-index", "merlin"]
let s:opam_check_cmdline = ["opam list --installed --short --safe --color=never"] + s:opam_packages
let s:opam_available_tools = split(system(join(s:opam_check_cmdline)))
for tool in s:opam_packages
  " Respect package order (merlin should be after ocp-index)
  if count(s:opam_available_tools, tool) > 0
    call s:opam_configuration[tool]()
  endif
endfor
" ## end of OPAM user-setup addition for vim / base ## keep this line
" ## added by OPAM user-setup for vim / ocp-indent ## 2756262e7e2d22713ca0ad59dbef3b99 ## you can edit, but keep this line
if count(s:opam_available_tools,"ocp-indent") == 0
  source /home/samdk/.opam/4.04.1/share/vim/syntax/ocp-indent.vim
endif
" ## end of OPAM user-setup addition for vim / ocp-indent ## keep this line

