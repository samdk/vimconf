filetype off
filetype indent plugin off
call pathogen#runtime_append_all_bundles()
filetype on
filetype indent on
filetype plugin on

" general things
set nocompatible
set backspace=indent,eol,start
syntax on
set number " show line numbers
set t_Co=256

" vimclojure stuff
let vimclojureRoot="~/.vim/bundle/vimclojure"
let vimclojure#HighlightBuiltins=1
let vimclojure#HighlightContrib=1
let vimclojure#DynamicHighlighting=1
let vimclojure#ParenRainbow=1

" make Python syntax highlighting highlight more things
let python_highlight_numbers=1
let python_highlight_builtins=1
let python_highlight_exceptions=1

" coffeescript syntax highlighting stuff
let coffee_no_trailing_space_error=1

" better titlestring for working on multiple computers
let &titlestring = "%m %f @ " . hostname()

" set undofile option if it's supported (old debian/centos dislike it)
if exists('&undofile')
  set undofile
  set undodir=~/.vim/undo//
endif
set undolevels=1000

" kill error bells entirely
set noerrorbells
set novisualbell
set t_vb=

" better titlestring for working on multiple computers
let &titlestring = "%m %f @ " . hostname()

" mouse in terminal
set mouse=a

set history=1000
set ruler
set showmatch
runtime macros/matchit.vim " matches if/elseif/else as well as brackets

set scrolloff=3 " scroll before reaching the edge of the page
set virtualedit=block

set nowrap
set lbr " wraps at words instead of at characters

" stuff for searching
set ignorecase
set smartcase
set hlsearch
set incsearch
map <silent> <F12> :nohlsearch<CR>

" autocomplete when opening files. behaves somewhat similarly to bash.
set wildignore=*.bak,*.swp,*.pyc,*.o,*.obj,*.dll,*.exe,*.ml.d,*.mli.d,*.objdeps
set wildmenu
set wildmode=list:longest

" by default, use 4 spaces. tabs are 8 to make them stand out.
set tabstop=8
set shiftwidth=2
set softtabstop=2
set expandtab

set autoindent
set smartindent

au BufRead,BufNewFile *.py setl et sw=4 sts=4 ts=8

" new HTML files get automatic boilerplate
au BufNewFile *.html 0r ~/.vim/templates/template.html

" some additional bindings for dealing with ctags
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR> "open in new tab
map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR> " open in new vertical split

" backups and swap files go in .vim
"
" ending with the double slash includes the full path in the filename
" of the swap files to avoid conflicts
set backupdir=~/.vim/backup//
set backup
set directory=~/.vim/tmp//

" leader commands
let maplocalleader = ",,"
let mapleader = ","
nmap <leader>c :%s///gn<cr> " ,c gives a count of highlighted stuff

" up/down move between visual lines instead of actual lines when wrapped
imap <silent> <Down> <C-o>gj
imap <silent> <Up> <C-o>gk
nmap <silent> <Down> gj
nmap <silent> <Up> gk

" autocompletes parens/brackets
inoremap ( ()<Left>
inoremap [ []<Left>

" autocomplete quotes intelligently
" stolen from somewhere, although I don't remember where.
inoremap ' '<Esc>:call QuoteInsertionWrapper("'")<CR>a
inoremap " "<Esc>:call QuoteInsertionWrapper('"')<CR>a
inoremap ` `<Esc>:call QuoteInsertionWrapper('`')<CR>a

" requires vim-indent-guides -- colors specified in vimsidian color scheme
let g:indent_guides_auto_colors = 0
let g:indent_guides_enable_on_vim_startup = 1

" graphical undo tree
nnoremap <F5> :GundoToggle<CR>

" use space to jump to space
nnoremap <Space> }
vnoremap <Space> }
nnoremap \ {
vnoremap \ {

" Ctrl-N and Ctrl-P go to next/prev tabs in normal mode
nmap <silent> <C-N> :tabnext<Enter>
nmap <silent> <C-P> :tabprev<Enter>

function! QuoteInsertionWrapper (quote)
  let col = col('.')
  if getline('.')[col-2] !~ '\k' && getline('.')[col] !~ '\k'
    normal ax
    exe "normal r".a:quote."h"
  end
endfunction


" show highlight group for text under cursor
map <F3> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">" . " FG:" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"fg#")<CR>

colorscheme vimsidian2
" no need for a separate .gvimrc
if has('gui_running')
  set lines=60 " new gvim windows are 100x60
  set columns=100
  set guifont=Inconsolata\ 11

  set guioptions-=m  " hide the menu bar
  set guioptions-=T  " hide the toolbar
  set guioptions-=rR " hide the right-hand scroll bar
  set guioptions-=lL " hide the left-hand scroll bar
  set guioptions-=b  " hide the horizontal scroll bar
  " shows/hides menu bar on Ctrl-F1
  nnoremap <C-F1> :if &go=~#'m'<Bar>set go-=m<Bar>else<Bar>set go+=m<Bar>endif<CR>

  " vim indent guides support -- only really looks nice in gvim
  let g:indent_guides_color_change_percent=4 " subtle is good
  let g:indent_guides_enable_on_vim_startup=1
endif


" add environment-specific customizations"
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
